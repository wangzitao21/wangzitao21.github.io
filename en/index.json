[{"content":"Previously, I set my home\u0026rsquo;s optical modem to bridge mode, switched to router dialing, and turned off the IPv6 firewall, which allowed me to successfully use public IPv6 for inbound connections.\nHowever, the operator provides a dynamic IPv6 prefix of /56, which changes every few days, making it inconvenient to use.\nHere are several countermeasures I tried.\nDDNS The best way to solve dynamic IP is to use DDNS, which stands for Dynamic DNS. Here is the specific process.\n1 Configure Reverse Proxy First, you need to install Nginx and use acme to apply for a domain certificate. It is best to apply for a wildcard domain certificate here so that you can use multiple third-level domains. For specific steps, see [[Nginx (Reverse Proxy) and Acme (Certificate Configuration)]], which will not be repeated in this article.\nThen configure Nginx reverse proxy, the steps are as follows:\nTake the Anki service as an example, which listens on port 27701. Create a configuration file: 1 2 cd /etc/nginx/conf.d \u0026amp;\u0026amp; \\ vim /etc/nginx/conf.d/anki.conf Write the following configuration. The port number range is 0-65535. Here I will only listen to high ports like 63001 and only use SSL access. HTTP will not be set to listen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 server { listen 63001 ssl; listen [::]:63001 ssl; server_name anki.example.com; location / { proxy_pass http://127.0.0.1:27701; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_redirect off; proxy_set_header X-Real-Port $remote_port; proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; proxy_set_header X-NginX-Proxy true; proxy_set_header Accept-Encoding \u0026#34;\u0026#34;; } ssl_certificate /root/.acme.sh/example.com_ecc/fullchain.cer; ssl_certificate_key /root/.acme.sh/example.com_ecc/example.com.key; add_header Strict-Transport-Security \u0026#34;max-age=63072000\u0026#34; always; } Doing so may cause some devices to fail to redirect from HTTP to HTTPS. You need to manually enter https:// before the domain name.\nIn addition, you need to remember to open port 63001 in the firewall.\n2 Install and Configure DDNS-GO I use the ddns-go project for setup. The Docker command is as follows:\n1 2 3 4 5 6 docker run -d \\ --name ddns-go \\ --restart=always \\ --net=host \\ -v /home/wang/docker_data/ddns-go:/root \\ jeessy2/ddns-go After the container is built, you can directly access the web interface of ddns-go at port 9876 and make the following configurations:\nSelect Cloudflare as the DNS provider. Open the Cloudflare homepage, find \u0026ldquo;Manage Account\u0026rdquo; \u0026gt; \u0026ldquo;Account API Tokens\u0026rdquo; \u0026gt; \u0026ldquo;Create Token\u0026rdquo; \u0026gt; \u0026ldquo;Edit Zone DNS\u0026rdquo;, click \u0026ldquo;Use Template\u0026rdquo;, and then select your own secondary domain as the zone to include. Copy the generated Token value and paste it into the DDNS-GO web interface. Continue in the web interface, check to enable IPv6, select \u0026ldquo;Get through network interface\u0026rdquo;, select the corresponding network interface, fill in the third-level domain name that you need to dynamically resolve at Domains, and then save the above configuration. Try to query your third-level domain IP from the command line: 1 nslookup xxx.example.com 3 About the Risks of DDNS Since DDNS requires domain name configuration and DNS resolution needs to be configured with the domain name provider, in principle, website establishment must be filed with the Ministry of Industry and Information Technology.\nHowever, home equipment cannot be used for filing. In addition, according to online information, operators sometimes detect and block TLS inbound traffic. Therefore, using DDNS may face certain risks.\nThere are several ways to avoid this risk:\nUse high ports. Try not to use commonly used ports such as 80, 443, 8080, and 8443 (these ports are closed by default in some areas). Add an access path to the domain name. For example, xxx.example.com can be changed to only be accessible through xxx.example.com/path, and if no path is entered, a 444 error is returned. Give up public network access and use VPN instead. Using VPN access is undoubtedly the safest, but this method is generally limited to personal use, and sharing it with others will be more troublesome. The Tailscale section below will introduce this practice. Manual DDNS. Configure an SMTP mail server to periodically send the current IPv6 of the server to the mailbox. This is the most brutal approach and can be used as a backup. The following will introduce this practice. Using Tailscale VPN Tailscale is a virtual private network construction tool based on the WireGuard protocol, which can connect devices in different locations to a private network.\nThe biggest advantage of Tailscale is that if both devices have public IPv6, they can connect directly without the need for a third-party server to relay, so the access speed can be guaranteed.\nThe installation of Tailscale is basically not difficult. Just download it normally from the Download page and complete the installation and registration process.\nAfter installing Tailscale on all devices, you can query all online and offline devices in the virtual private network on the Admin console page. From then on, as long as we keep Tailscale running in the background, we can use the local area network domain name or IP to directly access the corresponding service.\nLinux systems can use the following commands to query and turn off/on Tailscale:\n1 2 3 4 5 6 sudo systemctl enable tailscaled sudo systemctl status tailscaled sudo systemctl restart tailscaled sudo systemctl stop tailscaled cat /lib/systemd/system/tailscaled.service Tailscale has many other uses. For me, currently I only need to achieve the purpose of VPN access. I will continue to update it later if needed.\n1 Relay Server For devices without IPv6, Tailscale supports using a relay server. However, the relay servers provided by Tailscale are all abroad, and the delay is difficult to guarantee. We can use the following command to query the official relay server latency:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Test relay server latency tailscale netcheck # Output as follows Report: * Time: 2025-01-26T10:37:16.276723386Z * UDP: true * IPv4: yes, xxx.xxx.xxx.xxx:26667 * IPv6: yes, [240e:xxxx:xxxx:xxxx::c2]:57110 * MappingVariesByDestIP: false * PortMapping: * CaptivePortal: false * Nearest DERP: Tokyo * DERP latency: - tok: 130.7ms (Tokyo) - sin: 159ms (Singapore) - sfo: 160.1ms (San Francisco) - hkg: 166.8ms (Hong Kong) - lax: 167.9ms (Los Angeles) - sea: 168.2ms (Seattle) - den: 172.6ms (Denver) - ... ... In order to improve the user experience of devices without public IPv6, we can also build a relay server. But for my current situation, there is no need for this at all, so I have not tried it.\n2 File Sharing Tailscale only needs to turn on the \u0026ldquo;Send Files\u0026rdquo; function in the General interface to transfer files between online devices in the virtual private network.\nWindows and Android systems will send to the system\u0026rsquo;s Downloads folder, and Linux systems will send to the following directory:\n1 /var/lib/tailscale/files/Account Email-uid-xxxxxx However, I currently feel that this function is still a bit tasteless. Android still needs to specifically turn on Tailscale to transfer files each time. Although Windows and Linux can be set to start automatically by default, various shared folders can be mounted in advance.\nRegularly Send IPv6 Address by Email In order to prevent the DDNS method from failing, I also prepared a most brutal method, which is to write a simple script in Python to regularly use my Foxmail mailbox to report the current IPv6 address of the server to my Outlook mailbox, so that in special circumstances, pure IP access can be used.\nThe specific steps are as follows:\nFirst, configure the SMTP/IMAP service in Foxmail, just follow the instructions on the official website. Execute the following command to create a Conda environment and install related modules: 1 2 3 conda create -n ddns python=3.11 \u0026amp;\u0026amp; conda activate ddns pip install requests schedule I wrote a simple Python script here:\n1 vim /home/wang/shell/ddns_mail.py Write the following content:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 import smtplib from email.mime.text import MIMEText import requests import schedule import time # Email configuration SMTP_SERVER = \u0026#39;smtp.qq.com\u0026#39; # SMTP server address SMTP_PORT = 587 # SMTP server port number EMAIL_ADDRESS = \u0026#39;xxx@foxmail.com\u0026#39; # Sending email address EMAIL_PASSWORD = \u0026#34;xxx\u0026#34; # Email application specific password RECEIVER_EMAIL = \u0026#39;xxx@outlook.com\u0026#39; # Recipient email address # API for obtaining IPv6 address (can be changed as needed, or obtained directly from local) IPV6_API = \u0026#39;https://api6.ipify.org\u0026#39; def get_ipv6_address(): \u0026#34;\u0026#34;\u0026#34;Get the IPv6 address of the server.\u0026#34;\u0026#34;\u0026#34; try: response = requests.get(IPV6_API) response.raise_for_status() # Check if the request was successful return response.text.strip() except requests.exceptions.RequestException as e: print(f\u0026#34;Failed to get IPv6 address: {e}\u0026#34;) return None def send_email(ipv6_address): \u0026#34;\u0026#34;\u0026#34;Send an email containing the IPv6 address.\u0026#34;\u0026#34;\u0026#34; if ipv6_address: message = MIMEText(f\u0026#34;The current IPv6 address of the server is: {ipv6_address}\u0026#34;) message[\u0026#39;Subject\u0026#39;] = \u0026#39;Server IPv6 Address\u0026#39; message[\u0026#39;From\u0026#39;] = EMAIL_ADDRESS message[\u0026#39;To\u0026#39;] = RECEIVER_EMAIL server = None try: server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT) server.starttls() # Enable TLS encryption server.login(EMAIL_ADDRESS, EMAIL_PASSWORD) server.sendmail(EMAIL_ADDRESS, RECEIVER_EMAIL, message.as_string()) print(\u0026#34;Email sent successfully!\u0026#34;) except Exception as e: # Catch a wider range of exceptions print(f\u0026#34;Email sending failed: ({type(e)}) {e}\u0026#34;) # Output the type of exception finally: if server: try: server.quit() except Exception as e: print(f\u0026#34;Error closing connection: ({type(e)}) {e}\u0026#34;) else: print(\u0026#34;Unable to send email, IPv6 address unknown.\u0026#34;) def job(): \u0026#34;\u0026#34;\u0026#34;Scheduled task function, get and send IPv6 address.\u0026#34;\u0026#34;\u0026#34; ipv6_address = get_ipv6_address() send_email(ipv6_address) # Set up scheduled tasks schedule.every().day.at(\u0026#34;20:17\u0026#34;).do(job) if __name__ == \u0026#34;__main__\u0026#34;: print(\u0026#34;The script has been started and will send the IPv6 address regularly every day.\u0026#34;) while True: schedule.run_pending() time.sleep(1) Add a daemon for the above script: 1 sudo vim /etc/systemd/system/ddns_mail.service Write the following content:\n1 2 3 4 5 6 7 8 9 10 11 12 13 [Unit] Description=DDNS Mail After=network.target [Service] Type=simple User=wang WorkingDirectory=/home/wang/shell ExecStart=/home/wang/apps/miniconda3/envs/ddns/bin/python /home/wang/shell/ddns_mail.py \u0026gt;\u0026gt; /home/wang/logs/ddns_mail.log 2\u0026gt;\u0026amp;1 Restart=on-failure [Install] WantedBy=multi-user.target Enable or disable process services. 1 2 3 4 5 6 sudo systemctl daemon-reload sudo systemctl enable ddns_mail.service sudo systemctl restart ddns_mail.service sudo systemctl status ddns_mail.service # Query logs journalctl -u ddns_mail.service The above script is currently running normally, but the output log is always empty. I have checked manual execution and permission issues, but I still can\u0026rsquo;t solve it. I don\u0026rsquo;t want to delve into the specific reasons for the time being, as long as it can be used normally.\n","permalink":"https://wangzitao21.github.io/en/methods-to-access-dynamic-public-ipv6/","summary":"\u003cp\u003ePreviously, I set my home\u0026rsquo;s optical modem to bridge mode, switched to router dialing, and turned off the IPv6 firewall, which allowed me to successfully use public IPv6 for inbound connections.\u003c/p\u003e\n\u003cp\u003eHowever, the operator provides a dynamic IPv6 prefix of /56, which changes every few days, making it inconvenient to use.\u003c/p\u003e\n\u003cp\u003eHere are several countermeasures I tried.\u003c/p\u003e\n\u003ch1 id=\"ddns\"\u003eDDNS\u003c/h1\u003e\n\u003cp\u003eThe best way to solve dynamic IP is to use DDNS, which stands for Dynamic DNS. Here is the specific process.\u003c/p\u003e","title":"Methods to Access Dynamic Public IPv6"},{"content":"SSH stands for Secure Shell, which adds encryption to the shell. The common Linux server logins we encounter use SSH.\nPreviously, I used SSH without a clear understanding of its principles and specific steps. This time, I have systematically organized some information.\nHowever, this article is still relatively basic and may be further updated as my understanding deepens.\nParts of this section refer to the following articles:\nYou use SSH every day, but do you know its principles? What Is SSH? How Does SSH Work? Why does SSH need to use DH (Diffie-Hellman Exchange)? A thorough explanation of asymmetric encryption (public and private keys) with illustrations When using SSH to access a server, the following five processes are mainly involved:\n1 TCP Handshake and Negotiation This process can be further divided into the following three parts:\nEstablish TCP Connection: The client first initiates a TCP connection request to the server\u0026rsquo;s listening port (default is port 22) and establishes a TCP three-way handshake connection (TCP Handshake). Version Negotiation: After the connection is established, the client and server exchange their respective supported SSH protocol version information and negotiate the highest commonly supported version as the subsequent communication version. Algorithm Negotiation: The client and server exchange their respective supported lists of encryption algorithms, key exchange algorithms, MAC algorithms, compression algorithms, etc., and negotiate a set of algorithm suites that are both supported and optimal, used for subsequent encrypted communication, authentication, and integrity verification. 2 Server Authentication Once the TCP connection is established, the server first sends its public key/certificate, i.e., the host key, to the client for server authentication.\nThe host key is an asymmetric encryption key pair used to verify the server\u0026rsquo;s identity, including a public key and a private key. The host key is used to prevent man-in-the-middle attacks, ensuring that the client is connected to the correct server. This pair of host keys is stored on the server, and their locations are:\n1 2 3 4 # Private key /etc/ssh/ssh_host_rsa_key # Public key /etc/ssh/ssh_host_rsa_key.pub During the connection, the server sends its public key ssh_host_rsa_key.pub. At this point, the client performs verification in the following ways:\nIf the client is connecting to the server for the first time, the client will receive a warning indicating that this is a new server and asking whether to trust this host, displaying a message like The authenticity of host 'xxx' can't be established. Once the client confirms, it will save the server\u0026rsquo;s public key to the local ~/.ssh/known_hosts file for direct connection in the future. If the client has previously connected to this server, the client checks whether the received public key matches the public key stored in known_hosts. If they match, the connection continues; if they do not match, there may be a risk of a man-in-the-middle attack, and the client will warn and refuse the connection. If a host key signed by an SSH CA is used, this inquiry process can be avoided, and the client will directly trust the server.\nSince the SSH connection is initiated by the client, the above steps are to allow the client to verify that the server is the correct server to be connected to, in order to prevent being intercepted by a man-in-the-middle.\n3 Key Exchange After completing server authentication, the client and server use the previously negotiated key exchange algorithm (such as the most commonly used Diffie-Hellman algorithm) to generate a shared Session Key. This process is the Key Exchange.\nThe Session Key is a symmetric encryption key, which is faster for encryption and decryption, and is used to encrypt all data in the subsequent session. In addition, the Session Key is temporary, only valid during the current session, and both the client and server hold it, using it to encrypt and decrypt data.\nThe steps to generate the Session Key (Diffie-Hellman algorithm) are:\nThe server first generates two pre-agreed numbers, G and P. The server generates a temporary private key b and uses G, P, and b to generate a public key y. The server sends G, P, and y directly to the client in plain text. The client generates a temporary private key a and uses the received G, P, and a to calculate a public key x. The client sends the public key x to the server. The server uses the private key b, the received x, and P to calculate K. The client uses the private key a, the received y, and P to calculate K. Here, K is the Session Key.\nWhy do both the server and the client get K?\nGiven:\nThe client\u0026rsquo;s calculation formula for K is $K = y^a \\bmod P$, The server\u0026rsquo;s calculation formula for K is $K = x^b \\bmod P$,\nAnd the calculation formulas for x and y are:\n$y = G^b \\bmod P$, $x = G^a \\bmod P$,\nTherefore, we can derive:\n$y^a \\bmod P = (G^b \\bmod P)^a \\bmod P = G^{(b\\times a)} \\bmod P$,\n$x^b \\bmod P = (G^a \\bmod P)^b \\bmod P = G^{(a\\times b)} \\bmod P$,\nThus, both calculate the same K.\n4 User Authentication After the key exchange is completed, the server begins to verify the client\u0026rsquo;s identity (User Authentication).\nEarlier, when deploying a server, we would first generate a pair of asymmetric keys on the client-side, where the private key is kept by the client, and the public key is pasted into /home/\u0026lt;user\u0026gt;/.ssh/authorized_keys on the server.\nDuring the user authentication phase, the server uses this public key to verify the client. Specifically, the client uses the private key to sign a piece of data and sends the signature to the server. The server uses the client\u0026rsquo;s public key from authorized_keys to verify the signature. If the verification is successful, the authentication is successful.\nHowever, in this article, I saw that the client verification process might be a bit more complex You use SSH every day, but do you know its principles?, involving an additional random challenge rather than just verifying the signature. It can be roughly divided into these steps:\nClient Initiates Authentication Request: The client uses its private key to sign a data block (this data block usually contains information such as the session ID) and sends the signature and public key ID to the server. Server Verifies Public Key: The server finds the public key corresponding to the public key ID provided by the client in authorized_keys and uses this public key to verify the client\u0026rsquo;s signature, confirming that the request was initiated by the corresponding client. Server Issues Challenge: The server generates a random string, called a challenge, encrypts it using the client\u0026rsquo;s public key, and then sends the encrypted challenge to the client. Client Responds to Challenge: The client uses its private key to decrypt the server\u0026rsquo;s challenge, obtaining the original string. Then, to further prove that it is a real-time client and not a replay attack, the client also uses the Session Key to encrypt the string again and sends the result to the server. Server Verifies Response: The server uses the same session key to encrypt the previously generated challenge value and compares the result with the result sent by the client. If the two are consistent, authentication is successful, and the client is allowed to log in. The advantage of the challenge-response mechanism is to prevent Replay Attacks. In other words, even if someone previously stole the client\u0026rsquo;s signature, they cannot pass authentication because the challenge generated by the server is different each time. This ensures that the entity currently undergoing authentication is the real client and not a recorded authentication process.\nAdditionally, user authentication can generally also use password authentication, but it is not secure and is generally recommended to be turned off.\n5 Establishing an Encrypted Session Finally, the client and server will start using the Session Key to encrypt the communication content. All subsequent data transmission (commands, files, output, etc.) will be encrypted using the session key.\n","permalink":"https://wangzitao21.github.io/en/principles-and-access-process-of-the-ssh-protocol/","summary":"\u003cp\u003eSSH stands for Secure Shell, which adds encryption to the shell. The common Linux server logins we encounter use SSH.\u003c/p\u003e\n\u003cp\u003ePreviously, I used SSH without a clear understanding of its principles and specific steps. This time, I have systematically organized some information.\u003c/p\u003e\n\u003cp\u003eHowever, this article is still relatively basic and may be further updated as my understanding deepens.\u003c/p\u003e\n\u003cp\u003eParts of this section refer to the following articles:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/108161141\"\u003eYou use SSH every day, but do you know its principles?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://info.support.huawei.com/info-finder/encyclopedia/en/SSH.html\"\u003eWhat Is SSH? How Does SSH Work?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.zhihu.com/question/282877403\"\u003eWhy does SSH need to use DH (Diffie-Hellman Exchange)?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/436455172\"\u003eA thorough explanation of asymmetric encryption (public and private keys) with illustrations\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen using SSH to access a server, the following five processes are mainly involved:\u003c/p\u003e","title":"Principles and Access Process of the SSH Protocol"},{"content":"The way PHREEQC calculates density has always puzzled me. Sometimes, I input a density value A, but the output density is B. Then, when I change the input density to B, the output density becomes C.\nAfter repeatedly consulting the PHREEQC Users forum, I have basically figured out the calculation logic of density. Here is my summary.\nBackground In PHREEQC, there are two units for measuring the mass of a liquid: kgw and kgs.\nAssuming that the solvent is pure water, then:\nkgw refers to 1 kg of pure water. c($x$)=1 mmol/kgw means that one kilogram of pure water contains 1 mmol of $x$. kgs refers to 1 kg of solution, which includes both solute and pure water. c($x$)=1 mmol/kgs means that one kilogram of solution (mass of pure water + solute) contains 1 mmol of $x$. When the solution is a dilute solution, the mass of the solute can be ignored. In this case, the density, viscosity, and other properties of pure water are the properties of the solution.\nOnly when the solute concentration is very high and has seriously affected the mass of the solution will the mass of the solution be much greater than the mass of pure water, and the density will differ greatly.\nIn PHREEQC, Molality, Activity, and Moles are output. Among them, Molality refers to the number of moles of solute per kilogram of solvent, that is, mol/kgw; Moles refers to the total number of moles of elements in the entire solution, that is, mol; Activity refers to the ion activity, the unit is the same as Molality.\nThree Scenarios of Density Calculation According to the different input units, I divide the calculation logic of PHREEQC into three situations:\n1 Input Unit is mg/kgw or mol/kgw When the input solution unit is mg/kgw or mol/kgw, the input density has no effect on the display of PHREEQC, and the input concentration is equal to the Molality finally calculated by PHREEQC.\nFor example, we input the following solution, using the database pitzer.dat:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 SOLUTION 1 -water 1 -temp 25 -units mol/kgw density 1 pH 7 pe 4.0 Ca 0.7 Na 0.889 Mg 0.2 C(4) 0.2 S(6) 0.256 Cl 0.4 END At this time, we don\u0026rsquo;t care about the ion speciation, only look at the concentration results:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -----------------------------Solution composition------------------------------ Elements Molality Moles C(4) 2.000e-01 2.000e-01 Ca 7.000e-01 7.000e-01 Cl 4.000e-01 4.000e-01 Mg 2.000e-01 2.000e-01 Na 8.890e-01 8.890e-01 S(6) 2.560e-01 2.560e-01 ----------------------------Description of solution---------------------------- pH = 7.000 pe = 4.000 Density (g/cm3) = 1.09475 Volume (L) = 1.00850 Mass of water (kg) = 1.000e+00 Try to modify the input density and you will find that no matter what the input density is, the output solution density and volume will not change. This is because PHREEQC does not use our input density at all. It will automatically calculate the volume and density of the input solution based on the molar concentration and moles of the solute.\nIf the above input unit is changed from mol/kgw to mg/kgw, the output result is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -----------------------------Solution composition------------------------------ Elements Molality Moles C(4) 3.278e-06 3.278e-06 Ca 1.747e-05 1.747e-05 Cl 1.128e-05 1.128e-05 Mg 8.229e-06 8.229e-06 Na 3.867e-05 3.867e-05 S(6) 2.665e-06 2.665e-06 ----------------------------Description of solution---------------------------- pH = 7.000 pe = 4.000 Density (g/cm3) = 0.99705 Volume (L) = 1.00297 Mass of water (kg) = 1.000e+00 At this time, the Solution composition part will be automatically converted to mol/kgw by PHREEQC, and the volume and density are also automatically calculated.\nIn summary, if the input unit is mg/kgw or mol/kgw, PHREEQC will calculate the density itself, and no matter what density is input, it will be ignored.\n2 Input Unit is mg/kgs or mol/kgs When our input solution unit is mg/kgs or mol/kgs, the input density has no effect on the display of PHREEQC either, because there is no volume calculation involved. But at this time, the input solute concentration is not equal to the Molality finally calculated by PHREEQC, and conversion is required.\nTaking the following solution as an example, the conversion method of PHREEQC is explained:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 SOLUTION 1 -water 1 -temp 25 -units mol/kgs density 1 pH 7 pe 4.0 Ca 0.7 Na 0.889 Mg 0.2 C(4) 0.2 S(6) 0.256 Cl 0.4 END Run the above script in PHREEQC, and the result is as follows:\n1 2 3 4 5 6 7 Elements Molality Moles C(4) 2.233e-01 2.233e-01 Ca 7.815e-01 7.815e-01 Cl 4.466e-01 4.466e-01 Mg 2.233e-01 2.233e-01 Na 9.926e-01 9.926e-01 S(6) 2.858e-01 2.858e-01 It can be seen that the calculation result of PHREEQC is larger than the input concentration. The calculation logic here should be:\nFirst convert the solute concentration from mol/kgs to kg/kgs, and sum all ions to get the mass of all solutes in 1 kgs of solution $\\alpha$ kg. Subtract $\\alpha$ kg from 1 kgs of solution to get the mass of pure water as (1-$\\alpha$) kgw. Now we know how many moles of various ions are in 1 kgs of solution, divide it by (1-$\\alpha$) kgw to get the corresponding concentration of various ions under 1 kgw of pure water, that is, mol/kgw. To verify the above logic, a simple calculation is as follows using Python:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Assume 1 kg solution concentrations = { \u0026#34;Ca\u0026#34;: 0.7, # mol/kgs \u0026#34;Na\u0026#34;: 0.889, \u0026#34;Mg\u0026#34;: 0.2, \u0026#34;Cl\u0026#34;: 0.4, \u0026#34;C(4)\u0026#34;: 0.2, \u0026#34;S(6)\u0026#34;: 0.256, } molar_masses = { \u0026#34;K\u0026#34;: 39.098, # g/mol \u0026#34;Na\u0026#34;: 22.990, \u0026#34;Ca\u0026#34;: 40.078, \u0026#34;Mg\u0026#34;: 24.305, \u0026#34;Li\u0026#34;: 6.94, \u0026#34;Cl\u0026#34;: 35.45, \u0026#34;S(6)\u0026#34;: 96.056, \u0026#34;C(4)\u0026#34;: 60.008 } # Calculate the sum of the masses of each ion total_mass = sum(concentrations[element] * molar_masses[element] for element in concentrations) / 1000 # The mass of water in 1kg solution is water_mass = 1 - total_mass ions_mass = {element: concentration / water_mass for element, concentration in concentrations.items()} The output is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 {\u0026#39;Ca\u0026#39;: 0.7813595699827344, \u0026#39;Na\u0026#39;: 0.9923266538780727, \u0026#39;Mg\u0026#39;: 0.22324559142363842, \u0026#39;Cl\u0026#39;: 0.44649118284727685, \u0026#39;C(4)\u0026#39;: 0.22324559142363842, \u0026#39;S(6)\u0026#39;: 0.28575435702225715} {\u0026#39;Ca\u0026#39;: 0.7814, \u0026#39;Na\u0026#39;: 0.9923, \u0026#39;Mg\u0026#39;: 0.2232, \u0026#39;Cl\u0026#39;: 0.4465, \u0026#39;C(4)\u0026#39;: 0.2232, \u0026#39;S(6)\u0026#39;: 0.2858} At this time, it is basically the same as the PHREEQC calculation result. As for why each ion has a deviation of 0.0001-0.0003, I guess it may be related to the rounding of the molar mass and the choice of the database.\n3 Input Unit is mg/L or mol/L In actual work, the most commonly used units are mol/L or mg/L. But this situation is the most complicated in PHREEQC, because our input density value comes into play at this time.\nAs mentioned earlier, since databases such as phreeqc.dat and pitzer.dat have definitions of molar volume for solution components, PHREEQC can automatically calculate the density. However, the process of calculating density internally in PHREEQC is more complicated and will not be discussed too much here. We only analyze how the output result is converted when the input density value is given.\nThe input density is regarded as the input density, and the density calculated by PHREEQC is regarded as the calculated density.\nThe density here refers to the density of the solution, it cannot be the density of pure water, and it is meaningless to discuss the density of pure water. The input density and calculated density of PHREEQC are also solution densities.\nStill taking the case of the previous section as an example, just change the concentration unit to mol/L and set the density to 1.2 kgs/m$^3$:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 SOLUTION 1 -water 1 -temp 25 -units mol/L density 1.2 pH 7 pe 4.0 Ca 0.7 Na 0.889 Mg 0.2 C(4) 0.2 S(6) 0.256 Cl 0.4 END In this post on the forum Density calculation and mole concentration of components and Converting from molality (mol/kgw) to mg/l for high solubility minerals, I saw the PHREEQC developer say this sentence:\nDensity is used to convert mg/L to mg/kgs. Then, the sum of the solutes is subtracted from the kilogram of solution to get the mass of water. Finally, the masses are scaled to produce 1 kg of water.\nHe means that our input density is only used to convert the input unit from xx/L to xx/kgs. Then, as we discussed in the previous section, the unit is converted to xx/kgw, that is, scaled to the molar concentration when 1 kg of water is produced.\nThis shows that the input density only plays an initial conversion role, and PHREEQC will still calculate the density itself. The steps at this time should be:\nDivide the input ion concentration mol/L by the input density kg/m$^3$, remove the volume, and get mol/kgs. Follow the calculation steps in the previous section to obtain the concentration of various ions under 1 kgw of pure water, that is, mol/kgw. The Python script for verification is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 concentrations = { \u0026#34;Ca\u0026#34;: 0.7 / 1.2, # mol/L / density kg/m^3 \u0026#34;Na\u0026#34;: 0.889 / 1.2, \u0026#34;Mg\u0026#34;: 0.2 / 1.2, \u0026#34;Cl\u0026#34;: 0.4 / 1.2, \u0026#34;C(4)\u0026#34;: 0.2 / 1.2, \u0026#34;S(6)\u0026#34;: 0.256 / 1.2, } molar_masses = { \u0026#34;K\u0026#34;: 39.098, # g/mol \u0026#34;Na\u0026#34;: 22.990, \u0026#34;Ca\u0026#34;: 40.078, \u0026#34;Mg\u0026#34;: 24.305, \u0026#34;Li\u0026#34;: 6.94, \u0026#34;Cl\u0026#34;: 35.45, \u0026#34;S(6)\u0026#34;: 96.056, \u0026#34;C(4)\u0026#34;: 60.008 } total_mass = sum(concentrations[element] * molar_masses[element] for element in concentrations) / 1000 water_mass = 1 - total_mass normalized_ions_mass = {element: concentration / water_mass for element, concentration in concentrations.items()} normalized_ions_mass The output is:\n1 2 3 4 5 6 \u0026#39;Ca\u0026#39;: 0.6387593590861604, \u0026#39;Na\u0026#39;: 0.8112243860394237, \u0026#39;Mg\u0026#39;: 0.18250267402461728, \u0026#39;Cl\u0026#39;: 0.36500534804923457, \u0026#39;C(4)\u0026#39;: 0.18250267402461728, \u0026#39;S(6)\u0026#39;: 0.23360342275151008 PHREEQC\u0026rsquo;s result is:\n1 2 3 4 5 6 7 Elements Molality Moles C(4) 1.825e-01 1.825e-01 Ca 6.389e-01 6.389e-01 Cl 3.651e-01 3.651e-01 Mg 1.825e-01 1.825e-01 Na 8.114e-01 8.114e-01 S(6) 2.336e-01 2.336e-01 There will still be very small differences, the reason is the same as above.\nAbout the calc Parameter in PHREEQC In PHREEQC version 3.8 and above, if you add a calc after the density, the density calculation of PHREEQC will iteratively tend to the input density.\nBut I haven\u0026rsquo;t tested this effect, so I\u0026rsquo;m not sure.\nYou can refer to:\nDensity calculation in the Description of solution section of the output Versions 3.8.2 of all PHREEQC programs have been released. Volume in PHREEQC The volume output in PHREEQC is calculated according to its internal logic (including the molar volume of ions and other parameters), and has nothing to do with our density.\nIn the SOLUTION keyword, a -water parameter will be input. This -water refers to the defined mass of pure water, and according to the calculation logic of density and concentration in the front, this parameter will not affect the result of Molality, it will only affect Moles.\nFor example, taking the above case as an example, increase -water by 10 times and 100 times respectively:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 SOLUTION 1 -water 10 -temp 25 -units mol/kgw density 2 pH 7 pe 4.0 Ca 0.7 Na 0.889 Mg 0.2 C(4) 0.2 S(6) 0.256 Cl 0.4 END The calculation result at this time is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # -water 10 Elements Molality Moles C(4) 2.000e-01 2.000e+00 Ca 7.000e-01 7.000e+00 Cl 4.000e-01 4.000e+00 Mg 2.000e-01 2.000e+00 Na 8.890e-01 8.890e+00 S(6) 2.560e-01 2.560e+00 Density (g/cm3) = 1.09475 Volume (L) = 10.08496 # -water 100 Elements Molality Moles C(4) 2.000e-01 2.000e+01 Ca 7.000e-01 7.000e+01 Cl 4.000e-01 4.000e+01 Mg 2.000e-01 2.000e+01 Na 8.890e-01 8.890e+01 S(6) 2.560e-01 2.560e+01 Density (g/cm3) = 1.09475 Volume (L) = 100.84961 It can be seen that only Moles are increasing, which has no effect on Molality. The volume also increases in proportion to the mass.\nFrom this, we can know that in PHREEQC, we cannot freely control the volume input. PHREEQC will automatically calculate the density and volume according to the needs. However, as the mass of pure water -water increases, the volume also increases.\nIn the process of reactive transport, mol/L cannot be input casually. If you must specify the solution volume and input mol/L, you need to deal with it according to the following conditions:\nSuppose the solution volume of a certain calculation is known to be $m$ L. If it is a dilute solution, it can be regarded as $m$ L of pure water. At this time, just input -water 0.001*m kgw. If it is a concentrated solution, you need to ensure that you measure the accurate density of the solution, and then convert $m$ L of the solution into $kgs$. On this basis, subtract the mass of the solute to get the mass of pure water kgw, and assign it to -water, in order to ensure that the Moles calculated by PHREEQC meets expectations. Convert Output Results to mol/L The output of PHREEQC is mol/kgw by default, and there are no optional units.\nIf you must convert to mol/L, you can use the PUNCH keyword, for example:\n1 10 PUNCH TOT(\u0026#34;K\u0026#34;) * TOT(\u0026#34;water\u0026#34;) / SOLN_VOL Where TOT refers to the Molality of the ion, the unit is mol/kgw, TOT(\u0026quot;water\u0026quot;) specifically refers to the mass of pure water, kgw. SOLN_VOL is the volume of the solution, calculated by PHREEQC.\n","permalink":"https://wangzitao21.github.io/en/calculation-logic-of-density-in-phreeqc/","summary":"\u003cp\u003eThe way PHREEQC calculates density has always puzzled me. Sometimes, I input a density value A, but the output density is B. Then, when I change the input density to B, the output density becomes C.\u003c/p\u003e\n\u003cp\u003eAfter repeatedly consulting the \u003ca href=\"https://www.phreeqcusers.org/\"\u003ePHREEQC Users\u003c/a\u003e forum, I have basically figured out the calculation logic of density. Here is my summary.\u003c/p\u003e\n\u003ch1 id=\"background\"\u003eBackground\u003c/h1\u003e\n\u003cp\u003eIn PHREEQC, there are two units for measuring the mass of a liquid: \u003ccode\u003ekgw\u003c/code\u003e and \u003ccode\u003ekgs\u003c/code\u003e.\u003c/p\u003e","title":"Calculation Logic of Density in PHREEQC"},{"content":"This is a blog I have built.\n","permalink":"https://wangzitao21.github.io/en/about/","summary":"\u003cp\u003eThis is a blog I have built.\u003c/p\u003e","title":"About"},{"content":"In the Windows system, sometimes when adding environment variables for some executable files, such as ffmpeg, modflow, etc., it usually requires a system restart to take effect.\nHowever, restarting often requires closing many ongoing tasks, which is very troublesome.\nThe following steps can refresh environment variables without restarting the system:\nAdd the path of the program you need to add to the environment variables. Open CMD and enter echo %Path% to view the current environment variables. Enter set PATH=C:. Close CMD and reopen it. Entering echo %Path% again will show that the environment variables have been updated. ","permalink":"https://wangzitao21.github.io/en/how-to-refresh-environment-variables-without-restarting-windows/","summary":"\u003cp\u003eIn the Windows system, sometimes when adding environment variables for some executable files, such as ffmpeg, modflow, etc., it usually requires a system restart to take effect.\u003c/p\u003e\n\u003cp\u003eHowever, restarting often requires closing many ongoing tasks, which is very troublesome.\u003c/p\u003e\n\u003cp\u003eThe following steps can refresh environment variables without restarting the system:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAdd the path of the program you need to add to the environment variables.\u003c/li\u003e\n\u003cli\u003eOpen CMD and enter \u003ccode\u003eecho %Path%\u003c/code\u003e to view the current environment variables.\u003c/li\u003e\n\u003cli\u003eEnter \u003ccode\u003eset PATH=C:\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eClose CMD and reopen it. Entering \u003ccode\u003eecho %Path%\u003c/code\u003e again will show that the environment variables have been updated.\u003c/li\u003e\n\u003c/ol\u003e","title":"How to Refresh Environment Variables Without Restarting Windows"}]